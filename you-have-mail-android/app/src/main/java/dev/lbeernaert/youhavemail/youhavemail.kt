// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package dev.lbeernaert.youhavemail;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the detils of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.ptr.ByReference
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.locks.ReentrantLock
import kotlin.concurrent.withLock

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : RustBuffer(), Structure.ByValue
    class ByReference : RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_youhavemail_2da6_rustbuffer_alloc(size, status).also {
                if(it.data == null) {
                   throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
               }
            }
        }

        internal fun free(buf: RustBuffer.ByValue) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_youhavemail_2da6_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setInt(0, value.capacity)
        pointer.setInt(4, value.len)
        pointer.setPointer(8, value.data)
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): Int

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity.toLong()).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class RustCallStatus : Structure() {
    @JvmField var code: Int = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    fun isSuccess(): Boolean {
        return code == 0
    }

    fun isError(): Boolean {
        return code == 1
    }

    fun isPanic(): Boolean {
        return code == 2
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: Exception> rustCallWithError(errorHandler: CallStatusErrorHandler<E>, callback: (RustCallStatus) -> U): U {
    var status = RustCallStatus();
    val return_value = callback(status)
    if (status.isSuccess()) {
        return return_value
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object NullCallStatusErrorHandler: CallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> rustCall(callback: (RustCallStatus) -> U): U {
    return rustCallWithError(NullCallStatusErrorHandler, callback);
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "youhavemail"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface _UniFFILib : Library {
    companion object {
        internal val INSTANCE: _UniFFILib by lazy {
            loadIndirect<_UniFFILib>(componentName = "youhavemail")
            .also { lib: _UniFFILib ->
                FfiConverterTypeNotifier.register(lib)
                FfiConverterTypeServiceFromConfigCallback.register(lib)
                }
            
        }
    }

    fun ffi_youhavemail_2da6_Backend_object_free(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun youhavemail_2da6_Backend_name(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun youhavemail_2da6_Backend_description(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_youhavemail_2da6_Account_object_free(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun youhavemail_2da6_Account_login(`ptr`: Pointer,`password`: RustBuffer.ByValue,`hvData`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun youhavemail_2da6_Account_logout(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun youhavemail_2da6_Account_submit_totp(`ptr`: Pointer,`totp`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun youhavemail_2da6_Account_is_logged_in(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Byte

    fun youhavemail_2da6_Account_is_awaiting_totp(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Byte

    fun youhavemail_2da6_Account_is_logged_out(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Byte

    fun youhavemail_2da6_Account_email(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_youhavemail_2da6_Service_object_free(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun youhavemail_2da6_Service_get_backends(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun youhavemail_2da6_Service_new_account(`ptr`: Pointer,`backend`: Pointer,`email`: RustBuffer.ByValue,`proxy`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Pointer

    fun youhavemail_2da6_Service_check_proxy(`ptr`: Pointer,`backend`: Pointer,`proxy`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun youhavemail_2da6_Service_get_observed_accounts(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun youhavemail_2da6_Service_add_account(`ptr`: Pointer,`account`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun youhavemail_2da6_Service_logout_account(`ptr`: Pointer,`email`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun youhavemail_2da6_Service_remove_account(`ptr`: Pointer,`email`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun youhavemail_2da6_Service_set_account_proxy(`ptr`: Pointer,`email`: RustBuffer.ByValue,`proxy`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun youhavemail_2da6_Service_pause(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun youhavemail_2da6_Service_resume(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun youhavemail_2da6_Service_shutdown(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun youhavemail_2da6_Service_get_config(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun youhavemail_2da6_Service_get_poll_interval(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Long

    fun youhavemail_2da6_Service_set_poll_interval(`ptr`: Pointer,`interval`: Long,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun ffi_youhavemail_2da6_Notifier_init_callback(`callbackStub`: ForeignCallback,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun ffi_youhavemail_2da6_ServiceFromConfigCallback_init_callback(`callbackStub`: ForeignCallback,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun youhavemail_2da6_new_service(`notifier`: Long,
    _uniffi_out_err: RustCallStatus
    ): Pointer

    fun youhavemail_2da6_new_service_from_config(`notifier`: Long,`cb`: Long,`bytes`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Pointer

    fun ffi_youhavemail_2da6_rustbuffer_alloc(`size`: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_youhavemail_2da6_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_youhavemail_2da6_rustbuffer_free(`buf`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun ffi_youhavemail_2da6_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    
}

// Public interface members begin here.


public object FfiConverterUShort: FfiConverter<UShort, Short> {
    override fun lift(value: Short): UShort {
        return value.toUShort()
    }

    override fun read(buf: ByteBuffer): UShort {
        return lift(buf.getShort())
    }

    override fun lower(value: UShort): Short {
        return value.toShort()
    }

    override fun allocationSize(value: UShort) = 2

    override fun write(value: UShort, buf: ByteBuffer) {
        buf.putShort(value.toShort())
    }
}

public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len)
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteArr.size)
        rbuf.asByteBuffer()!!.put(byteArr)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per unicode codepoint which will always be
    // enough.
    override fun allocationSize(value: String): Int {
        val sizeForLength = 4
        val sizeForString = value.length * 3
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        buf.putInt(byteArr.size)
        buf.put(byteArr)
    }
}


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

// The base class for all UniFFI Object types.
//
// This class provides core operations for working with the Rust `Arc<T>` pointer to
// the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// the Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each `FFIObject` instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an `FFIObject` is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an `FFIObject` instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so will
//     leak the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each `FFIObject` an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// In the future we may be able to replace some of this with automatic finalization logic, such as using
// the new "Cleaner" functionaility in Java 9. The above scheme has been designed to work even if `destroy` is
// invoked by garbage-collection machinery rather than by calling code (which by the way, it's apparently also
// possible for the JVM to finalize an object while there is an in-flight call to one of its methods [1],
// so there would still be some complexity here).
//
// Sigh...all of this for want of a robust finalization mechanism.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//
abstract class FFIObject(
    protected val pointer: Pointer
): Disposable, AutoCloseable {

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    open protected fun freeRustArcPtr() {
        // To be overridden in subclasses.
    }

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.pointer)
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }
}

public interface AccountInterface {
    
    @Throws(ServiceException::class)
    fun `login`(`password`: String, `hvData`: String?)
    
    @Throws(ServiceException::class)
    fun `logout`()
    
    @Throws(ServiceException::class)
    fun `submitTotp`(`totp`: String)
    
    fun `isLoggedIn`(): Boolean
    
    fun `isAwaitingTotp`(): Boolean
    
    fun `isLoggedOut`(): Boolean
    
    fun `email`(): String
    
}

class Account(
    pointer: Pointer
) : FFIObject(pointer), AccountInterface {

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_youhavemail_2da6_Account_object_free(this.pointer, status)
        }
    }

    
    @Throws(ServiceException::class)override fun `login`(`password`: String, `hvData`: String?) =
        callWithPointer {
    rustCallWithError(ServiceException) { _status ->
    _UniFFILib.INSTANCE.youhavemail_2da6_Account_login(it, FfiConverterString.lower(`password`), FfiConverterOptionalString.lower(`hvData`),  _status)
}
        }
    
    
    @Throws(ServiceException::class)override fun `logout`() =
        callWithPointer {
    rustCallWithError(ServiceException) { _status ->
    _UniFFILib.INSTANCE.youhavemail_2da6_Account_logout(it,  _status)
}
        }
    
    
    @Throws(ServiceException::class)override fun `submitTotp`(`totp`: String) =
        callWithPointer {
    rustCallWithError(ServiceException) { _status ->
    _UniFFILib.INSTANCE.youhavemail_2da6_Account_submit_totp(it, FfiConverterString.lower(`totp`),  _status)
}
        }
    
    override fun `isLoggedIn`(): Boolean =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.youhavemail_2da6_Account_is_logged_in(it,  _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    override fun `isAwaitingTotp`(): Boolean =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.youhavemail_2da6_Account_is_awaiting_totp(it,  _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    override fun `isLoggedOut`(): Boolean =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.youhavemail_2da6_Account_is_logged_out(it,  _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    override fun `email`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.youhavemail_2da6_Account_email(it,  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    

    
}

public object FfiConverterTypeAccount: FfiConverter<Account, Pointer> {
    override fun lower(value: Account): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Account {
        return Account(value)
    }

    override fun read(buf: ByteBuffer): Account {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Account) = 8

    override fun write(value: Account, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface BackendInterface {
    
    fun `name`(): String
    
    fun `description`(): String
    
}

class Backend(
    pointer: Pointer
) : FFIObject(pointer), BackendInterface {

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_youhavemail_2da6_Backend_object_free(this.pointer, status)
        }
    }

    override fun `name`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.youhavemail_2da6_Backend_name(it,  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    override fun `description`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.youhavemail_2da6_Backend_description(it,  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    

    
}

public object FfiConverterTypeBackend: FfiConverter<Backend, Pointer> {
    override fun lower(value: Backend): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Backend {
        return Backend(value)
    }

    override fun read(buf: ByteBuffer): Backend {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Backend) = 8

    override fun write(value: Backend, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface ServiceInterface {
    
    fun `getBackends`(): List<Backend>
    
    fun `newAccount`(`backend`: Backend, `email`: String, `proxy`: Proxy?): Account
    
    @Throws(ServiceException::class)
    fun `checkProxy`(`backend`: Backend, `proxy`: Proxy?)
    
    @Throws(ServiceException::class)
    fun `getObservedAccounts`(): List<ObserverAccount>
    
    @Throws(ServiceException::class)
    fun `addAccount`(`account`: Account)
    
    @Throws(ServiceException::class)
    fun `logoutAccount`(`email`: String)
    
    @Throws(ServiceException::class)
    fun `removeAccount`(`email`: String)
    
    @Throws(ServiceException::class)
    fun `setAccountProxy`(`email`: String, `proxy`: Proxy?)
    
    @Throws(ServiceException::class)
    fun `pause`()
    
    @Throws(ServiceException::class)
    fun `resume`()
    
    @Throws(ServiceException::class)
    fun `shutdown`()
    
    @Throws(ConfigException::class)
    fun `getConfig`(): String
    
    @Throws(ServiceException::class)
    fun `getPollInterval`(): ULong
    
    @Throws(ServiceException::class)
    fun `setPollInterval`(`interval`: ULong)
    
}

class Service(
    pointer: Pointer
) : FFIObject(pointer), ServiceInterface {

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_youhavemail_2da6_Service_object_free(this.pointer, status)
        }
    }

    override fun `getBackends`(): List<Backend> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.youhavemail_2da6_Service_get_backends(it,  _status)
}
        }.let {
            FfiConverterSequenceTypeBackend.lift(it)
        }
    override fun `newAccount`(`backend`: Backend, `email`: String, `proxy`: Proxy?): Account =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.youhavemail_2da6_Service_new_account(it, FfiConverterTypeBackend.lower(`backend`), FfiConverterString.lower(`email`), FfiConverterOptionalTypeProxy.lower(`proxy`),  _status)
}
        }.let {
            FfiConverterTypeAccount.lift(it)
        }
    
    @Throws(ServiceException::class)override fun `checkProxy`(`backend`: Backend, `proxy`: Proxy?) =
        callWithPointer {
    rustCallWithError(ServiceException) { _status ->
    _UniFFILib.INSTANCE.youhavemail_2da6_Service_check_proxy(it, FfiConverterTypeBackend.lower(`backend`), FfiConverterOptionalTypeProxy.lower(`proxy`),  _status)
}
        }
    
    
    @Throws(ServiceException::class)override fun `getObservedAccounts`(): List<ObserverAccount> =
        callWithPointer {
    rustCallWithError(ServiceException) { _status ->
    _UniFFILib.INSTANCE.youhavemail_2da6_Service_get_observed_accounts(it,  _status)
}
        }.let {
            FfiConverterSequenceTypeObserverAccount.lift(it)
        }
    
    @Throws(ServiceException::class)override fun `addAccount`(`account`: Account) =
        callWithPointer {
    rustCallWithError(ServiceException) { _status ->
    _UniFFILib.INSTANCE.youhavemail_2da6_Service_add_account(it, FfiConverterTypeAccount.lower(`account`),  _status)
}
        }
    
    
    @Throws(ServiceException::class)override fun `logoutAccount`(`email`: String) =
        callWithPointer {
    rustCallWithError(ServiceException) { _status ->
    _UniFFILib.INSTANCE.youhavemail_2da6_Service_logout_account(it, FfiConverterString.lower(`email`),  _status)
}
        }
    
    
    @Throws(ServiceException::class)override fun `removeAccount`(`email`: String) =
        callWithPointer {
    rustCallWithError(ServiceException) { _status ->
    _UniFFILib.INSTANCE.youhavemail_2da6_Service_remove_account(it, FfiConverterString.lower(`email`),  _status)
}
        }
    
    
    @Throws(ServiceException::class)override fun `setAccountProxy`(`email`: String, `proxy`: Proxy?) =
        callWithPointer {
    rustCallWithError(ServiceException) { _status ->
    _UniFFILib.INSTANCE.youhavemail_2da6_Service_set_account_proxy(it, FfiConverterString.lower(`email`), FfiConverterOptionalTypeProxy.lower(`proxy`),  _status)
}
        }
    
    
    @Throws(ServiceException::class)override fun `pause`() =
        callWithPointer {
    rustCallWithError(ServiceException) { _status ->
    _UniFFILib.INSTANCE.youhavemail_2da6_Service_pause(it,  _status)
}
        }
    
    
    @Throws(ServiceException::class)override fun `resume`() =
        callWithPointer {
    rustCallWithError(ServiceException) { _status ->
    _UniFFILib.INSTANCE.youhavemail_2da6_Service_resume(it,  _status)
}
        }
    
    
    @Throws(ServiceException::class)override fun `shutdown`() =
        callWithPointer {
    rustCallWithError(ServiceException) { _status ->
    _UniFFILib.INSTANCE.youhavemail_2da6_Service_shutdown(it,  _status)
}
        }
    
    
    @Throws(ConfigException::class)override fun `getConfig`(): String =
        callWithPointer {
    rustCallWithError(ConfigException) { _status ->
    _UniFFILib.INSTANCE.youhavemail_2da6_Service_get_config(it,  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    @Throws(ServiceException::class)override fun `getPollInterval`(): ULong =
        callWithPointer {
    rustCallWithError(ServiceException) { _status ->
    _UniFFILib.INSTANCE.youhavemail_2da6_Service_get_poll_interval(it,  _status)
}
        }.let {
            FfiConverterULong.lift(it)
        }
    
    @Throws(ServiceException::class)override fun `setPollInterval`(`interval`: ULong) =
        callWithPointer {
    rustCallWithError(ServiceException) { _status ->
    _UniFFILib.INSTANCE.youhavemail_2da6_Service_set_poll_interval(it, FfiConverterULong.lower(`interval`),  _status)
}
        }
    
    

    
}

public object FfiConverterTypeService: FfiConverter<Service, Pointer> {
    override fun lower(value: Service): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Service {
        return Service(value)
    }

    override fun read(buf: ByteBuffer): Service {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Service) = 8

    override fun write(value: Service, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




data class ObserverAccount (
    var `email`: String, 
    var `status`: ObserverAccountStatus, 
    var `backend`: String, 
    var `proxy`: Proxy?
) {
    
}

public object FfiConverterTypeObserverAccount: FfiConverterRustBuffer<ObserverAccount> {
    override fun read(buf: ByteBuffer): ObserverAccount {
        return ObserverAccount(
            FfiConverterString.read(buf),
            FfiConverterTypeObserverAccountStatus.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalTypeProxy.read(buf),
        )
    }

    override fun allocationSize(value: ObserverAccount) = (
            FfiConverterString.allocationSize(value.`email`) +
            FfiConverterTypeObserverAccountStatus.allocationSize(value.`status`) +
            FfiConverterString.allocationSize(value.`backend`) +
            FfiConverterOptionalTypeProxy.allocationSize(value.`proxy`)
    )

    override fun write(value: ObserverAccount, buf: ByteBuffer) {
            FfiConverterString.write(value.`email`, buf)
            FfiConverterTypeObserverAccountStatus.write(value.`status`, buf)
            FfiConverterString.write(value.`backend`, buf)
            FfiConverterOptionalTypeProxy.write(value.`proxy`, buf)
    }
}




data class Proxy (
    var `protocol`: ProxyProtocol, 
    var `auth`: ProxyAuth?, 
    var `url`: String, 
    var `port`: UShort
) {
    
}

public object FfiConverterTypeProxy: FfiConverterRustBuffer<Proxy> {
    override fun read(buf: ByteBuffer): Proxy {
        return Proxy(
            FfiConverterTypeProxyProtocol.read(buf),
            FfiConverterOptionalTypeProxyAuth.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUShort.read(buf),
        )
    }

    override fun allocationSize(value: Proxy) = (
            FfiConverterTypeProxyProtocol.allocationSize(value.`protocol`) +
            FfiConverterOptionalTypeProxyAuth.allocationSize(value.`auth`) +
            FfiConverterString.allocationSize(value.`url`) +
            FfiConverterUShort.allocationSize(value.`port`)
    )

    override fun write(value: Proxy, buf: ByteBuffer) {
            FfiConverterTypeProxyProtocol.write(value.`protocol`, buf)
            FfiConverterOptionalTypeProxyAuth.write(value.`auth`, buf)
            FfiConverterString.write(value.`url`, buf)
            FfiConverterUShort.write(value.`port`, buf)
    }
}




data class ProxyAuth (
    var `username`: String, 
    var `password`: String
) {
    
}

public object FfiConverterTypeProxyAuth: FfiConverterRustBuffer<ProxyAuth> {
    override fun read(buf: ByteBuffer): ProxyAuth {
        return ProxyAuth(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: ProxyAuth) = (
            FfiConverterString.allocationSize(value.`username`) +
            FfiConverterString.allocationSize(value.`password`)
    )

    override fun write(value: ProxyAuth, buf: ByteBuffer) {
            FfiConverterString.write(value.`username`, buf)
            FfiConverterString.write(value.`password`, buf)
    }
}




enum class ObserverAccountStatus {
    OFFLINE,LOGGED_OUT,ONLINE,ERROR;
}

public object FfiConverterTypeObserverAccountStatus: FfiConverterRustBuffer<ObserverAccountStatus> {
    override fun read(buf: ByteBuffer) = try {
        ObserverAccountStatus.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: ObserverAccountStatus) = 4

    override fun write(value: ObserverAccountStatus, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class ProxyProtocol {
    HTTPS,SOCKS5;
}

public object FfiConverterTypeProxyProtocol: FfiConverterRustBuffer<ProxyProtocol> {
    override fun read(buf: ByteBuffer) = try {
        ProxyProtocol.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: ProxyProtocol) = 4

    override fun write(value: ProxyProtocol, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class RequestErrorCategory {
    TIMEOUT,CONNECTION,REQUEST,API;
}

public object FfiConverterTypeRequestErrorCategory: FfiConverterRustBuffer<RequestErrorCategory> {
    override fun read(buf: ByteBuffer) = try {
        RequestErrorCategory.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: RequestErrorCategory) = 4

    override fun write(value: RequestErrorCategory, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







sealed class ConfigException: Exception() {
    // Each variant is a nested class
    
    class BackendNotFound(
        val `account`: String, 
        val `backend`: String
        ) : ConfigException() {
        override val message
            get() = "account=${ `account` }, backend=${ `backend` }"
    }
    
    class BackendConfig(
        val `account`: String, 
        val `backend`: String, 
        val `error`: String
        ) : ConfigException() {
        override val message
            get() = "account=${ `account` }, backend=${ `backend` }, error=${ `error` }"
    }
    
    class Crypto(
        val `msg`: String
        ) : ConfigException() {
        override val message
            get() = "msg=${ `msg` }"
    }
    
    class Json(
        val `msg`: String
        ) : ConfigException() {
        override val message
            get() = "msg=${ `msg` }"
    }
    
    class RpcFailed(
        val `msg`: String
        ) : ConfigException() {
        override val message
            get() = "msg=${ `msg` }"
    }
    

    companion object ErrorHandler : CallStatusErrorHandler<ConfigException> {
        override fun lift(error_buf: RustBuffer.ByValue): ConfigException = FfiConverterTypeConfigError.lift(error_buf)
    }

    
}

public object FfiConverterTypeConfigError : FfiConverterRustBuffer<ConfigException> {
    override fun read(buf: ByteBuffer): ConfigException {
        

        return when(buf.getInt()) {
            1 -> ConfigException.BackendNotFound(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            2 -> ConfigException.BackendConfig(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            3 -> ConfigException.Crypto(
                FfiConverterString.read(buf),
                )
            4 -> ConfigException.Json(
                FfiConverterString.read(buf),
                )
            5 -> ConfigException.RpcFailed(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: ConfigException): Int {
        return when(value) {
            is ConfigException.BackendNotFound -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`account`)
                + FfiConverterString.allocationSize(value.`backend`)
            )
            is ConfigException.BackendConfig -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`account`)
                + FfiConverterString.allocationSize(value.`backend`)
                + FfiConverterString.allocationSize(value.`error`)
            )
            is ConfigException.Crypto -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`msg`)
            )
            is ConfigException.Json -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`msg`)
            )
            is ConfigException.RpcFailed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`msg`)
            )
        }
    }

    override fun write(value: ConfigException, buf: ByteBuffer) {
        when(value) {
            is ConfigException.BackendNotFound -> {
                buf.putInt(1)
                FfiConverterString.write(value.`account`, buf)
                FfiConverterString.write(value.`backend`, buf)
                Unit
            }
            is ConfigException.BackendConfig -> {
                buf.putInt(2)
                FfiConverterString.write(value.`account`, buf)
                FfiConverterString.write(value.`backend`, buf)
                FfiConverterString.write(value.`error`, buf)
                Unit
            }
            is ConfigException.Crypto -> {
                buf.putInt(3)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
            is ConfigException.Json -> {
                buf.putInt(4)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
            is ConfigException.RpcFailed -> {
                buf.putInt(5)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





sealed class ServiceException: Exception() {
    // Each variant is a nested class
    
    class HvCaptchaRequest(
        val `msg`: String
        ) : ServiceException() {
        override val message
            get() = "msg=${ `msg` }"
    }
    
    class HvDataInvalid(
        val `msg`: String
        ) : ServiceException() {
        override val message
            get() = "msg=${ `msg` }"
    }
    
    class RpcFailed(
        val `msg`: String
        ) : ServiceException() {
        override val message
            get() = "msg=${ `msg` }"
    }
    
    class AccountAlreadyActive(
        val `email`: String
        ) : ServiceException() {
        override val message
            get() = "email=${ `email` }"
    }
    
    class InvalidAccountState(
        ) : ServiceException() {
        override val message
            get() = ""
    }
    
    class RequestException(
        val `category`: RequestErrorCategory, 
        val `msg`: String
        ) : ServiceException() {
        override val message
            get() = "category=${ `category` }, msg=${ `msg` }"
    }
    
    class LoggedOut(
        ) : ServiceException() {
        override val message
            get() = ""
    }
    
    class Unknown(
        val `msg`: String
        ) : ServiceException() {
        override val message
            get() = "msg=${ `msg` }"
    }
    
    class Config(
        val `error`: ConfigException
        ) : ServiceException() {
        override val message
            get() = "error=${ `error` }"
    }
    
    class AccountNotFound(
        val `email`: String
        ) : ServiceException() {
        override val message
            get() = "email=${ `email` }"
    }
    
    class EncodeOrDecode(
        val `msg`: String
        ) : ServiceException() {
        override val message
            get() = "msg=${ `msg` }"
    }
    
    class ProxyException(
        ) : ServiceException() {
        override val message
            get() = ""
    }
    

    companion object ErrorHandler : CallStatusErrorHandler<ServiceException> {
        override fun lift(error_buf: RustBuffer.ByValue): ServiceException = FfiConverterTypeServiceError.lift(error_buf)
    }

    
}

public object FfiConverterTypeServiceError : FfiConverterRustBuffer<ServiceException> {
    override fun read(buf: ByteBuffer): ServiceException {
        

        return when(buf.getInt()) {
            1 -> ServiceException.HvCaptchaRequest(
                FfiConverterString.read(buf),
                )
            2 -> ServiceException.HvDataInvalid(
                FfiConverterString.read(buf),
                )
            3 -> ServiceException.RpcFailed(
                FfiConverterString.read(buf),
                )
            4 -> ServiceException.AccountAlreadyActive(
                FfiConverterString.read(buf),
                )
            5 -> ServiceException.InvalidAccountState()
            6 -> ServiceException.RequestException(
                FfiConverterTypeRequestErrorCategory.read(buf),
                FfiConverterString.read(buf),
                )
            7 -> ServiceException.LoggedOut()
            8 -> ServiceException.Unknown(
                FfiConverterString.read(buf),
                )
            9 -> ServiceException.Config(
                FfiConverterTypeConfigError.read(buf),
                )
            10 -> ServiceException.AccountNotFound(
                FfiConverterString.read(buf),
                )
            11 -> ServiceException.EncodeOrDecode(
                FfiConverterString.read(buf),
                )
            12 -> ServiceException.ProxyException()
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: ServiceException): Int {
        return when(value) {
            is ServiceException.HvCaptchaRequest -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`msg`)
            )
            is ServiceException.HvDataInvalid -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`msg`)
            )
            is ServiceException.RpcFailed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`msg`)
            )
            is ServiceException.AccountAlreadyActive -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`email`)
            )
            is ServiceException.InvalidAccountState -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
            )
            is ServiceException.RequestException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterTypeRequestErrorCategory.allocationSize(value.`category`)
                + FfiConverterString.allocationSize(value.`msg`)
            )
            is ServiceException.LoggedOut -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
            )
            is ServiceException.Unknown -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`msg`)
            )
            is ServiceException.Config -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterTypeConfigError.allocationSize(value.`error`)
            )
            is ServiceException.AccountNotFound -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`email`)
            )
            is ServiceException.EncodeOrDecode -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`msg`)
            )
            is ServiceException.ProxyException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
            )
        }
    }

    override fun write(value: ServiceException, buf: ByteBuffer) {
        when(value) {
            is ServiceException.HvCaptchaRequest -> {
                buf.putInt(1)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
            is ServiceException.HvDataInvalid -> {
                buf.putInt(2)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
            is ServiceException.RpcFailed -> {
                buf.putInt(3)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
            is ServiceException.AccountAlreadyActive -> {
                buf.putInt(4)
                FfiConverterString.write(value.`email`, buf)
                Unit
            }
            is ServiceException.InvalidAccountState -> {
                buf.putInt(5)
                Unit
            }
            is ServiceException.RequestException -> {
                buf.putInt(6)
                FfiConverterTypeRequestErrorCategory.write(value.`category`, buf)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
            is ServiceException.LoggedOut -> {
                buf.putInt(7)
                Unit
            }
            is ServiceException.Unknown -> {
                buf.putInt(8)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
            is ServiceException.Config -> {
                buf.putInt(9)
                FfiConverterTypeConfigError.write(value.`error`, buf)
                Unit
            }
            is ServiceException.AccountNotFound -> {
                buf.putInt(10)
                FfiConverterString.write(value.`email`, buf)
                Unit
            }
            is ServiceException.EncodeOrDecode -> {
                buf.putInt(11)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
            is ServiceException.ProxyException -> {
                buf.putInt(12)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




internal typealias Handle = Long
internal class ConcurrentHandleMap<T>(
    private val leftMap: MutableMap<Handle, T> = mutableMapOf(),
    private val rightMap: MutableMap<T, Handle> = mutableMapOf()
) {
    private val lock = java.util.concurrent.locks.ReentrantLock()
    private val currentHandle = AtomicLong(0L)
    private val stride = 1L

    fun insert(obj: T): Handle =
        lock.withLock {
            rightMap[obj] ?:
                currentHandle.getAndAdd(stride)
                    .also { handle ->
                        leftMap[handle] = obj
                        rightMap[obj] = handle
                    }
            }

    fun get(handle: Handle) = lock.withLock {
        leftMap[handle]
    }

    fun delete(handle: Handle) {
        this.remove(handle)
    }

    fun remove(handle: Handle): T? =
        lock.withLock {
            leftMap.remove(handle)?.let { obj ->
                rightMap.remove(obj)
                obj
            }
        }
}

interface ForeignCallback : com.sun.jna.Callback {
    public fun invoke(handle: Handle, method: Int, args: RustBuffer.ByValue, outBuf: RustBufferByReference): Int
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
internal const val IDX_CALLBACK_FREE = 0

public abstract class FfiConverterCallbackInterface<CallbackInterface>(
    protected val foreignCallback: ForeignCallback
): FfiConverter<CallbackInterface, Handle> {
    private val handleMap = ConcurrentHandleMap<CallbackInterface>()

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal abstract fun register(lib: _UniFFILib)

    fun drop(handle: Handle): RustBuffer.ByValue {
        return handleMap.remove(handle).let { RustBuffer.ByValue() }
    }

    override fun lift(value: Handle): CallbackInterface {
        return handleMap.get(value) ?: throw InternalException("No callback in handlemap; this is a Uniffi bug")
    }

    override fun read(buf: ByteBuffer) = lift(buf.getLong())

    override fun lower(value: CallbackInterface) =
        handleMap.insert(value).also {
            assert(handleMap.get(it) === value) { "Handle map is not returning the object we just placed there. This is a bug in the HandleMap." }
        }

    override fun allocationSize(value: CallbackInterface) = 8

    override fun write(value: CallbackInterface, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}

// Declaration and FfiConverters for Notifier Callback Interface

public interface Notifier {
    fun `newEmail`(`account`: String, `backend`: String, `sender`: String, `subject`: String)
    fun `accountAdded`(`email`: String)
    fun `accountLoggedOut`(`email`: String)
    fun `accountRemoved`(`email`: String)
    fun `accountOffline`(`email`: String)
    fun `accountOnline`(`email`: String)
    fun `accountError`(`email`: String, `error`: ServiceException)
    fun `proxyApplied`(`email`: String, `proxy`: Proxy?)
    fun `accountRefreshed`(`emails`: List<String>, `config`: String)
    fun `error`(`msg`: String)
    
}

// The ForeignCallback that is passed to Rust.
internal class ForeignCallbackTypeNotifier : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun invoke(handle: Handle, method: Int, args: RustBuffer.ByValue, outBuf: RustBufferByReference): Int {
        val cb = FfiConverterTypeNotifier.lift(handle)
        return when (method) {
            IDX_CALLBACK_FREE -> {
                FfiConverterTypeNotifier.drop(handle)
                // No return value.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                0
            }
            1 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs` for info
                try {
                    val buffer = this.`invokeNewEmail`(cb, args)
                    // Success
                    outBuf.setValue(buffer)
                    1
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    -1
                }
            }
            2 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs` for info
                try {
                    val buffer = this.`invokeAccountAdded`(cb, args)
                    // Success
                    outBuf.setValue(buffer)
                    1
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    -1
                }
            }
            3 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs` for info
                try {
                    val buffer = this.`invokeAccountLoggedOut`(cb, args)
                    // Success
                    outBuf.setValue(buffer)
                    1
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    -1
                }
            }
            4 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs` for info
                try {
                    val buffer = this.`invokeAccountRemoved`(cb, args)
                    // Success
                    outBuf.setValue(buffer)
                    1
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    -1
                }
            }
            5 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs` for info
                try {
                    val buffer = this.`invokeAccountOffline`(cb, args)
                    // Success
                    outBuf.setValue(buffer)
                    1
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    -1
                }
            }
            6 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs` for info
                try {
                    val buffer = this.`invokeAccountOnline`(cb, args)
                    // Success
                    outBuf.setValue(buffer)
                    1
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    -1
                }
            }
            7 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs` for info
                try {
                    val buffer = this.`invokeAccountError`(cb, args)
                    // Success
                    outBuf.setValue(buffer)
                    1
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    -1
                }
            }
            8 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs` for info
                try {
                    val buffer = this.`invokeProxyApplied`(cb, args)
                    // Success
                    outBuf.setValue(buffer)
                    1
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    -1
                }
            }
            9 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs` for info
                try {
                    val buffer = this.`invokeAccountRefreshed`(cb, args)
                    // Success
                    outBuf.setValue(buffer)
                    1
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    -1
                }
            }
            10 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs` for info
                try {
                    val buffer = this.`invokeError`(cb, args)
                    // Success
                    outBuf.setValue(buffer)
                    1
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    -1
                }
            }
            
            else -> {
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                try {
                    // Try to serialize the error into a string
                    outBuf.setValue(FfiConverterString.lower("Invalid Callback index"))
                } catch (e: Throwable) {
                    // If that fails, then it's time to give up and just return
                }
                -1
            }
        }
    }

    
    private fun `invokeNewEmail`(kotlinCallbackInterface: Notifier, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            val buf = args.asByteBuffer() ?: throw InternalException("No ByteBuffer in RustBuffer; this is a Uniffi bug")
            kotlinCallbackInterface.`newEmail`(
                    FfiConverterString.read(buf), 
                    FfiConverterString.read(buf), 
                    FfiConverterString.read(buf), 
                    FfiConverterString.read(buf)
                    )
            .let { RustBuffer.ByValue() }
                // TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351
        } finally {
            RustBuffer.free(args)
        }

    
    private fun `invokeAccountAdded`(kotlinCallbackInterface: Notifier, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            val buf = args.asByteBuffer() ?: throw InternalException("No ByteBuffer in RustBuffer; this is a Uniffi bug")
            kotlinCallbackInterface.`accountAdded`(
                    FfiConverterString.read(buf)
                    )
            .let { RustBuffer.ByValue() }
                // TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351
        } finally {
            RustBuffer.free(args)
        }

    
    private fun `invokeAccountLoggedOut`(kotlinCallbackInterface: Notifier, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            val buf = args.asByteBuffer() ?: throw InternalException("No ByteBuffer in RustBuffer; this is a Uniffi bug")
            kotlinCallbackInterface.`accountLoggedOut`(
                    FfiConverterString.read(buf)
                    )
            .let { RustBuffer.ByValue() }
                // TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351
        } finally {
            RustBuffer.free(args)
        }

    
    private fun `invokeAccountRemoved`(kotlinCallbackInterface: Notifier, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            val buf = args.asByteBuffer() ?: throw InternalException("No ByteBuffer in RustBuffer; this is a Uniffi bug")
            kotlinCallbackInterface.`accountRemoved`(
                    FfiConverterString.read(buf)
                    )
            .let { RustBuffer.ByValue() }
                // TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351
        } finally {
            RustBuffer.free(args)
        }

    
    private fun `invokeAccountOffline`(kotlinCallbackInterface: Notifier, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            val buf = args.asByteBuffer() ?: throw InternalException("No ByteBuffer in RustBuffer; this is a Uniffi bug")
            kotlinCallbackInterface.`accountOffline`(
                    FfiConverterString.read(buf)
                    )
            .let { RustBuffer.ByValue() }
                // TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351
        } finally {
            RustBuffer.free(args)
        }

    
    private fun `invokeAccountOnline`(kotlinCallbackInterface: Notifier, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            val buf = args.asByteBuffer() ?: throw InternalException("No ByteBuffer in RustBuffer; this is a Uniffi bug")
            kotlinCallbackInterface.`accountOnline`(
                    FfiConverterString.read(buf)
                    )
            .let { RustBuffer.ByValue() }
                // TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351
        } finally {
            RustBuffer.free(args)
        }

    
    private fun `invokeAccountError`(kotlinCallbackInterface: Notifier, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            val buf = args.asByteBuffer() ?: throw InternalException("No ByteBuffer in RustBuffer; this is a Uniffi bug")
            kotlinCallbackInterface.`accountError`(
                    FfiConverterString.read(buf), 
                    FfiConverterTypeServiceError.read(buf)
                    )
            .let { RustBuffer.ByValue() }
                // TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351
        } finally {
            RustBuffer.free(args)
        }

    
    private fun `invokeProxyApplied`(kotlinCallbackInterface: Notifier, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            val buf = args.asByteBuffer() ?: throw InternalException("No ByteBuffer in RustBuffer; this is a Uniffi bug")
            kotlinCallbackInterface.`proxyApplied`(
                    FfiConverterString.read(buf), 
                    FfiConverterOptionalTypeProxy.read(buf)
                    )
            .let { RustBuffer.ByValue() }
                // TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351
        } finally {
            RustBuffer.free(args)
        }

    
    private fun `invokeAccountRefreshed`(kotlinCallbackInterface: Notifier, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            val buf = args.asByteBuffer() ?: throw InternalException("No ByteBuffer in RustBuffer; this is a Uniffi bug")
            kotlinCallbackInterface.`accountRefreshed`(
                    FfiConverterSequenceString.read(buf), 
                    FfiConverterString.read(buf)
                    )
            .let { RustBuffer.ByValue() }
                // TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351
        } finally {
            RustBuffer.free(args)
        }

    
    private fun `invokeError`(kotlinCallbackInterface: Notifier, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            val buf = args.asByteBuffer() ?: throw InternalException("No ByteBuffer in RustBuffer; this is a Uniffi bug")
            kotlinCallbackInterface.`error`(
                    FfiConverterString.read(buf)
                    )
            .let { RustBuffer.ByValue() }
                // TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351
        } finally {
            RustBuffer.free(args)
        }

    
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
public object FfiConverterTypeNotifier: FfiConverterCallbackInterface<Notifier>(
    foreignCallback = ForeignCallbackTypeNotifier()
) {
    override fun register(lib: _UniFFILib) {
        rustCall() { status ->
            lib.ffi_youhavemail_2da6_Notifier_init_callback(this.foreignCallback, status)
        }
    }
}






// Declaration and FfiConverters for ServiceFromConfigCallback Callback Interface

public interface ServiceFromConfigCallback {
    fun `notifyError`(`email`: String, `error`: ServiceException)
    
}

// The ForeignCallback that is passed to Rust.
internal class ForeignCallbackTypeServiceFromConfigCallback : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun invoke(handle: Handle, method: Int, args: RustBuffer.ByValue, outBuf: RustBufferByReference): Int {
        val cb = FfiConverterTypeServiceFromConfigCallback.lift(handle)
        return when (method) {
            IDX_CALLBACK_FREE -> {
                FfiConverterTypeServiceFromConfigCallback.drop(handle)
                // No return value.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                0
            }
            1 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs` for info
                try {
                    val buffer = this.`invokeNotifyError`(cb, args)
                    // Success
                    outBuf.setValue(buffer)
                    1
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    -1
                }
            }
            
            else -> {
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                try {
                    // Try to serialize the error into a string
                    outBuf.setValue(FfiConverterString.lower("Invalid Callback index"))
                } catch (e: Throwable) {
                    // If that fails, then it's time to give up and just return
                }
                -1
            }
        }
    }

    
    private fun `invokeNotifyError`(kotlinCallbackInterface: ServiceFromConfigCallback, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            val buf = args.asByteBuffer() ?: throw InternalException("No ByteBuffer in RustBuffer; this is a Uniffi bug")
            kotlinCallbackInterface.`notifyError`(
                    FfiConverterString.read(buf), 
                    FfiConverterTypeServiceError.read(buf)
                    )
            .let { RustBuffer.ByValue() }
                // TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351
        } finally {
            RustBuffer.free(args)
        }

    
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
public object FfiConverterTypeServiceFromConfigCallback: FfiConverterCallbackInterface<ServiceFromConfigCallback>(
    foreignCallback = ForeignCallbackTypeServiceFromConfigCallback()
) {
    override fun register(lib: _UniFFILib) {
        rustCall() { status ->
            lib.ffi_youhavemail_2da6_ServiceFromConfigCallback_init_callback(this.foreignCallback, status)
        }
    }
}




public object FfiConverterOptionalString: FfiConverterRustBuffer<String?> {
    override fun read(buf: ByteBuffer): String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: String?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeProxy: FfiConverterRustBuffer<Proxy?> {
    override fun read(buf: ByteBuffer): Proxy? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeProxy.read(buf)
    }

    override fun allocationSize(value: Proxy?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeProxy.allocationSize(value)
        }
    }

    override fun write(value: Proxy?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeProxy.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeProxyAuth: FfiConverterRustBuffer<ProxyAuth?> {
    override fun read(buf: ByteBuffer): ProxyAuth? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeProxyAuth.read(buf)
    }

    override fun allocationSize(value: ProxyAuth?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeProxyAuth.allocationSize(value)
        }
    }

    override fun write(value: ProxyAuth?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeProxyAuth.write(value, buf)
        }
    }
}




public object FfiConverterSequenceString: FfiConverterRustBuffer<List<String>> {
    override fun read(buf: ByteBuffer): List<String> {
        val len = buf.getInt()
        return List<String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<String>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterString.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeBackend: FfiConverterRustBuffer<List<Backend>> {
    override fun read(buf: ByteBuffer): List<Backend> {
        val len = buf.getInt()
        return List<Backend>(len) {
            FfiConverterTypeBackend.read(buf)
        }
    }

    override fun allocationSize(value: List<Backend>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeBackend.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Backend>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeBackend.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeObserverAccount: FfiConverterRustBuffer<List<ObserverAccount>> {
    override fun read(buf: ByteBuffer): List<ObserverAccount> {
        val len = buf.getInt()
        return List<ObserverAccount>(len) {
            FfiConverterTypeObserverAccount.read(buf)
        }
    }

    override fun allocationSize(value: List<ObserverAccount>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeObserverAccount.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<ObserverAccount>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeObserverAccount.write(it, buf)
        }
    }
}
@Throws(ServiceException::class)

fun `newService`(`notifier`: Notifier): Service {
    return FfiConverterTypeService.lift(
    rustCallWithError(ServiceException) { _status ->
    _UniFFILib.INSTANCE.youhavemail_2da6_new_service(FfiConverterTypeNotifier.lower(`notifier`), _status)
})
}


@Throws(ServiceException::class)

fun `newServiceFromConfig`(`notifier`: Notifier, `cb`: ServiceFromConfigCallback, `bytes`: String): Service {
    return FfiConverterTypeService.lift(
    rustCallWithError(ServiceException) { _status ->
    _UniFFILib.INSTANCE.youhavemail_2da6_new_service_from_config(FfiConverterTypeNotifier.lower(`notifier`), FfiConverterTypeServiceFromConfigCallback.lower(`cb`), FfiConverterString.lower(`bytes`), _status)
})
}




