// NB: Android Studio can't find the imports; this does not affect the
// actual build since Gradle can find them just fine.
import com.android.tools.profgen.ArtProfileKt
import com.android.tools.profgen.ArtProfileSerializer
import com.android.tools.profgen.DexFile
import org.gradle.internal.os.OperatingSystem

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id "org.mozilla.rust-android-gradle.rust-android" version "0.9.3"
}

android {
    namespace 'dev.lbeernaert.youhavemail'
    compileSdk 34

    defaultConfig {
        applicationId "dev.lbeernaert.youhavemail"
        minSdk 29
        targetSdk 33
        versionCode 36
        versionName "0.16.4"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.0'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    ndkVersion "25.2.9519653"

    defaultConfig {
        ndk {
            //noinspection ChromeOsAbiSupport
            abiFilters 'arm64-v8a', 'x86_64', 'armeabi-v7a'
        }
    }
}

dependencies {
    // WorkManager dependency
    implementation "androidx.work:work-runtime-ktx:$versions_work"

    implementation 'androidx.core:core-ktx:1.13.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.8.4'
    implementation 'androidx.activity:activity-compose:1.9.1'
    implementation "androidx.compose.ui:ui:$compose_ui_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_ui_version"
    implementation 'androidx.compose.material:material:1.6.8'
    implementation 'androidx.security:security-crypto-ktx:1.1.0-alpha06'
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_ui_version"
    implementation 'androidx.navigation:navigation-compose:2.7.7'
    implementation "androidx.compose.material:material-icons-extended:$compose_ui_version"

    // Required for JNI
    implementation 'net.java.dev.jna:jna:5.14.0@aar'
}

apply plugin: 'org.mozilla.rust-android-gradle.rust-android'

cargo {
    module = "../../you-have-mail-mobile"
    libname = "youhavemail"
    targets = ["x86_64", "arm64", "arm"]
    targetIncludes = ["libyouhavemail.so", "libgo-srp.so"]
    targetDirectory = "/tmp/build-yhm"
    profile = "release"

    // Ensure paths are consistent for reproducible builds.
    exec { spec, _ ->
        var home = "$System.env.HOME"
        var pwd = "$System.env.PWD"
        spec.environment("RUSTFLAGS", "--remap-path-prefix=${home}=/remap --remap-path-prefix=${pwd}=/remap --remap-path-prefix=${pwd}/you-have-mail=/remap")
        spec.environment("CARGO_TARGET_DIR", "/tmp/build-yhm")
    }

    extraCargoBuildArguments = ['--locked']
}

task bindingBuild(type: Exec) {
    workingDir "../../you-have-mail-mobile"
    commandLine "cargo", "build"
}

var ext = "so"
if (OperatingSystem.current().isMacOsX()) {
    ext = "dylib"
}

task genBindings(type: Exec) {
    workingDir "../../you-have-mail-mobile"
    commandLine "cargo", "run", "--bin", "uniffi-bindgen", "--", "generate", "--library",
            "target/debug/libyouhavemail.$ext",
            "--language", "kotlin", "--config", "uniffi.toml",
            "--out-dir", "../you-have-mail-android/app/src/main/java"
}

tasks.whenTaskAdded { task ->
    // Require cargo to be run before copying native libraries.
    if ((task.name == 'mergeDebugJniLibFolders' || task.name == 'mergeReleaseJniLibFolders')) {
        task.dependsOn 'cargoBuild'
    }

    if (task.name == 'preBuild') {
        task.dependsOn genBindings
    }

    if (task.name == 'genBindings') {
        task.dependsOn 'cargoBuild'
    }
}


afterEvaluate {

    // The `cargoBuild` task isn't available until after evaluation.
    android.applicationVariants.all { variant ->
        def productFlavor = ""
        variant.productFlavors.each {
            productFlavor += "${it.name.capitalize()}"
        }
        def buildType = "${variant.buildType.name.capitalize()}"
        tasks["generate${productFlavor}${buildType}Assets"].dependsOn(tasks["cargoBuild"])
    }
}

// Sort .profm files for reproducible builds. Taken from
// https://gist.github.com/obfusk/eb82a810ed6aad266dab19977b18cee6
project.afterEvaluate {
    tasks.each { task ->
        if (task.name.startsWith("compile") && task.name.endsWith("ReleaseArtProfile")) {
            task.doLast {
                outputs.files.each { file ->
                    if (file.name.endsWith(".profm")) {
                        println("Sorting ${file} ...")
                        def version = ArtProfileSerializer.valueOf("METADATA_0_0_2")
                        def profile = ArtProfileKt.ArtProfile(file)
                        def keys = new ArrayList(profile.profileData.keySet())
                        def sortedData = new LinkedHashMap()
                        Collections.sort keys, new DexFile.Companion()
                        keys.each { key -> sortedData[key] = profile.profileData[key] }
                        new FileOutputStream(file).with {
                            write(version.magicBytes$profgen)
                            write(version.versionBytes$profgen)
                            version.write$profgen(it, sortedData, "")
                        }
                    }
                }
            }
        }
    }
}

afterEvaluate {
    genBindings.dependsOn(bindingBuild, cargoBuild)
    android.applicationVariants.all { variant ->
        variant.javaCompiler.dependsOn(genBindings)
    }
}
