namespace youhavemail {
    [Throws=ServiceError]
    Service new_service(Notifier notifier);

    [Throws=ServiceError]
    Service new_service_from_config(Notifier notifier, ServiceFromConfigCallback cb, [ByRef]string bytes);
};


enum RequestErrorCategory {
    "Timeout",
    "Connection",
    "Request",
    "API"
};

[Error]
interface ServiceError {
    RPCFailed(string msg);
    AccountAlreadyActive(string email);
    InvalidAccountState();
    RequestError(RequestErrorCategory category, string msg);
    LoggedOut();
    Unknown(string msg);
    Config(ConfigError error);
    AccountNotFound(string email);
    ProxyError();
};

[Error]
interface ConfigError {
    BackendNotFound(string account, string backend);
    BackendConfig(string account, string backend, string error);
    Crypto(string msg);
    JSON(string msg);
    RPCFailed(string msg);
};

enum ObserverAccountStatus {
    "Offline",
    "LoggedOut",
    "Online",
    "Error",
};

interface Backend {
    string name();
    string description();

};

interface Account {
    [Throws=ServiceError]
    void login(string password);

    [Throws=ServiceError]
    void logout();

    [Throws=ServiceError]
    void submit_totp(string totp);

    boolean is_logged_in();

    boolean is_awaiting_totp();

    boolean is_logged_out();

    string email();
};

dictionary ObserverAccount {
    string email;
    ObserverAccountStatus status;
    string backend;
    Proxy? proxy;
};

enum ProxyProtocol {
    "Https",
    "Socks5"
};

dictionary ProxyAuth {
    string username;
    string password;
};

dictionary Proxy {
    ProxyProtocol protocol;
    ProxyAuth? auth;
    string url;
    u16 port;
};

callback interface Notifier {
    void new_email (string account, string backend, string sender, string subject);
    void account_added(string email);
    void account_logged_out(string email);
    void account_removed(string email);
    void account_offline(string email);
    void account_online(string email);
    void account_error(string email, ServiceError error);
    void proxy_applied(string email, Proxy? proxy);
    void account_token_refreshed(string email);
};

callback interface ServiceFromConfigCallback {
    void notify_error(string email, ServiceError error);
};


interface Service {
    sequence<Backend> get_backends();

    [Self=ByArc]
    Account new_account([ByRef]Backend backend, string email, Proxy? proxy);

    [Throws=ServiceError]
    void check_proxy([ByRef]Backend backend, Proxy? proxy);

    [Throws=ServiceError]
    sequence<ObserverAccount> get_observed_accounts();

    [Throws=ServiceError]
    void add_account(Account account);

    [Throws=ServiceError]
    void logout_account(string email);

    [Throws=ServiceError]
    void remove_account(string email);

    [Throws=ServiceError]
    void set_account_proxy(string email, Proxy? proxy);

    [Throws=ServiceError]
    void pause();

    [Throws=ServiceError]
    void resume();

    [Throws=ServiceError]
    void shutdown();

    [Throws=ConfigError]
    string get_config();

    [Throws=ServiceError]
    u64 get_poll_interval();

    [Throws=ServiceError]
    void set_poll_interval(u64 interval);
};